% -*- mode: noweb; noweb-default-code-mode: R-mode; -*-
\documentclass [11pt,letterpaper]{article}
%\documentclass [11pt,letterpaper,twocolumn]{article}
%\documentclass[a4paper]{article}

\SweaveOpts{echo=FALSE}

@
<<user>>=
if (is.null(opts$user)) {
  u <- system("whoami",TRUE)
  cmd <- sprintf("finger %s | grep Name | sed 's/Lo.*Name: //'", u)
  opts$user <- system(cmd,TRUE)
}
#cat('tks.Rnw: length(opts$user), opts$user =', opts$user, '\n')

@
\title{TKS Report:
       \Sexpr{sprintf('bacteria: %s, agent: %s, model: %s', model$bacteria['id'], model$agent, model$name)}}
\author{\Sexpr{print(opts$user)}}

\SweaveOpts{echo=FALSE}
\usepackage{graphics}

\begin{document}

\maketitle

%\begin{figure}[htbp] % TBD: figure placements needs to be improved...

\noindent
Options:
<<options>>=
print.options(opts)

@
Stats for fitted parameters for \Sexpr{print(model$name)} model:
<<stats>>=
#selected.parms <- c('RMSE', 'Kg', 'Kk', 'H') # 'C50')
selected.parms <- c('Kg', 'Kk', 'H', 'C50k')
debug <- 0
# data passed from generate.report()
#data <- get('data')
if (debug) cat('generate.report: dim(.data) =', dim(.data), '\n')
data <- .data
#msg <- sprintf('class(data), nrow(data), ncol(data) = %s %d %d', class(data), nrow(data), ncol(data))
#stop(msg)
#m <- match(c('log10.N0', 'log10.Nmax'), names(data))
#df[,m] <- log(10^data[,m])
#names(df)[m] <- c('N0', 'Nmax')
#cat('before stats: cut.RMSE =', cut.RMSE, '\n')
#cat('before stats: x =\n'); print(x)
st <- stats(data, cut.RMSE=opts$cut.RMSE, delta.RMSE=opts$delta.RMSE)
par.stats <- st$stats
options(width=180)
#cat('after stats: par.stats =\n'); print(par.stats)
if (debug) {
  cat('names(par.stats) =', names(par.stats), '\n')
}
cat('used ', nrow(st$x), 'out of', nrow(data),'\n') 
cat('RAW DATA: mean(data$RMSE) =', round(mean(data$RMSE), digits=2), 'cut.RMSE =', cut.RMSE, '\n') 
print(signif(t(par.stats), digits=3))

@
\noindent
Clusters of fitted parameters:
<<clusters>>=
#cl <- cluster.parms(data)
cl <- cluster.parms(st$x)
if (!is.null(cl)) {
  print(signif(t(cl), digits=3))
} else {
  cat('WARNING: to few rows for clustering: nrow(st$x) =', nrow(st$x), '\n')
  stop('problem in cluster.parms() - this should never happen')
}

@
\noindent
\begin{itemize}
\item StDev used to shake experimental log10(CFU) data = \Sexpr{print(StDev$exp)}
\item StDev used to shake parameters before each optimization run = \Sexpr{print(StDev$opt)}
\item Number of repetitions for gaussian noise sampling = \Sexpr{print(nrow(.data))}
\item cut.RMSE = \Sexpr{print(cut.RMSE)}
\end{itemize}

\pagebreak

Data (log10(CFU/mL)):
<<exp.data>>=
make.unique <- function(x) {
   u <- unique(x)
   for (e in u) {
     w <- which(x == e)
     n <- length(w)
     if (n > 1) {
        for (i in 1:n) {
           j <- w[i]
           x[j] <- sprintf('%s:%d', x[j], i) 
        }
     }
   }
   return(x)
}
w <- as.data.frame(model$exp.data$log10CFU)
t <- model$exp.data$times; C <- model$exp.data$C
nt <- length(t); nc <- length(C)
cnames <- rep('x', nt); rnames <- rep('x', nc)
for (i in 1:nt) cnames[i] <- sprintf('%gh', t[i])
for (i in 1:nc) rnames[i] <- sprintf('%gx', C[i])
names(w) <- cnames; row.names(w) <- make.unique(rnames)
print(round(w, digits=2))

@
\begin{figure}
  %\begin{center}
   \setkeys{Gin}{width=1.2\textwidth}
<<data, fig=TRUE, pdf=FALSE>>=
plot.model(model)
@
    \caption{Experimental data}
  %\end{center}
\end{figure}


\pagebreak

\begin{figure}
  %\begin{center}
   \setkeys{Gin}{width=1.2\textwidth}
<<fit, fig=TRUE, pdf=FALSE>>=
#cat('just after fit...', '\n')
m <- match('Most.Likely', row.names(par.stats))
if(!prod(is.finite(m))) {
  cat('ERROR: undefined matches: m =', m, '\n')
  stop('undefined matches')
}
p <- par.stats[m, names(model$parms)]
if (0) {
  cat('after x2par: m=', m, '\n')
  cat('after x2par: dim(par.stats)=', dim(par.stats), '\n')
  cat('after x2par: dim(p)=', dim(p), '\n')
  cat('after x2par: class(p)=', class(p), '\n')
  cat('after x2par: p =\n')
}
#print(p)
if (0) {
  cat('before sumsq: p =', as.character(p), '\n')
  cat('before sumsq: model$idx =', model$idx, '\n')
  cat('before sumsq: model$times =', model$times, '\n')
}
sumsq.v <- sumsq(as.numeric(log(p)), model, times=model$times, rmse.only=F)
#cat('after sumsq: model$parms =', model$parms, '\n')
#split.screen(fig=c(2,2))
#screen(1); plot.model(model, vp=NULL, exp.lines=T)
#screen(2); plot.model(model, vp=v, exp.lines=F)
plot.model(model, vp=sumsq.v, exp.lines=F)
@
    \caption{FIT: with "most likely" params}
  %\end{center}
\end{figure}

@
\begin{figure}
  %\begin{center}
   \setkeys{Gin}{width=1.2\textwidth}
<<RMSE, fig=TRUE, pdf=FALSE>>=
# dev.off(dev.cur())
split.screen(fig=c(2,2))
n <- c(selected.parms)
dat <- add.row(data)
stx <- add.row(st$x)
if (0) {
  cat('after add.row: data =\n')
  print(data)
  cat('after add.row: dat =\n')
  print(dat)
  cat('after add.row: st$x =\n')
  print(st$x)
  cat('after add.row: stx =\n')
  print(stx)
  for (j in 1:ncol(dat)) {
     cat('DEBUG: j, names(dat)[j], class(dat[,j]) =', j, names(dat)[j], class(dat[,j]), '\n')
  }
  cat('DEBUG: class(dat), class(data) =', class(dat), class(data), '\n')
  cat('DEBUG: dim(dat)=', dim(dat), ' dim(data) =', dim(data), '\n')
  cat('DEBUG: dim(dat)=', dim(dat), ' dim(data) =', dim(data), '\n')
  cat('DEBUG: all.equal(dat, data) =', all.equal(dat, data), '\n')
  cat('DEBUG: selected.parms =', selected.parms, '\n')
  cat('DEBUG: n =', n, '\n')
  cat('DEBUG: names(dat) =', names(dat), '\n')
  for (i in 1:length(n)) {
    j <- match(n[i], names(dat))
    cat('DEBUG: i, n[i], j<-match(n[i], names(dat)) =', i, n[i], j, '\n')
  }
  print(showConnections(all = TRUE))
}
for (i in 1:length(n)) {
  j <- match(n[i], names(dat))
  if (!is.finite(j)) stop(sprintf('%s column not found', n[i]))
  #cat('DEBUG: j=', j, '\n')
  #flush(stdout())
  #flush('VT2005_Inf_bernoulli.tex')
  #cat('DEBUG: j, class(dat[,j]), =', j, class(dat[,j]), '\n')
  #stop('AAAAAAAAAAAAAAAAAAAAAAAA')
  d0 <- density(data[,j])
  d1 <- density(stx[,j])
  ylim <- c(0, max(d0$y, d1$y))
  m <- mean(stx[,j])
  sd <- sd(stx[,j])
  if (is.na(sd)) sd <- 0.1*mean
  xlim <- c(m-3*sd, m+3*sd)
  warn <- getOption('warn')
  options(warn=0)
  screen(i)
  plot(d0, xlab=n[i], ylim=ylim, xlim=xlim, main='')
  lines(d1, col='green'); rug(st$x[,j])
  options(warn=warn)
  xt <- xlim[1] + 2*(xlim[2]-xlim[1])/10
  text(xlim[1], 0.90*ylim[2], sprintf('%.2g', m), adj=c(0,0))
  text(xlim[2], 0.90*ylim[2], sprintf('SD=%4.2f', sd), adj=c(1,0))
}
@
    \caption{RMSE distribution for all data}
  %\end{center}
\end{figure}

@
\begin{figure}
  %\begin{center}
   \setkeys{Gin}{width=1.2\textwidth}
<<scatter, fig=TRUE, pdf=FALSE>>=
#y <- match.yo2yp(model, model$exp.data$log10CFU, v$yp)
yo <- model$exp.data$log10CFU
m <- match(model$exp.data$times, model$times)
yp <- sumsq.v$yp[,m]
make.scatterplot(yo, yp)
@
    \caption{SCATTER.}
  %\end{center}
\end{figure}

@
\begin{figure}
  %\begin{center}
   \setkeys{Gin}{width=1.2\textwidth}
<<residuals, fig=TRUE, pdf=FALSE>>=
residuals <- yo-yp
#cat('d =', d, '\n')
h <- hist(residuals)
#cat('after h < - hist(d); h$xname =', h$xname, '\n')
#plot(h, main='Histogram of residuals', xlab='residuals')
plot(h)
text(0.8*max(h$breaks), 0.9*max(h$counts), sprintf('Mean = %.2g', signif(mean(residuals,na.rm=TRUE), 2)))
@
    \caption{Residuals.}
  %\end{center}
\end{figure}

@
\begin{figure}
  %\begin{center}
   \setkeys{Gin}{width=1.2\textwidth}
<<residuals-vs-time, fig=TRUE, pdf=FALSE>>=
t <- model$exp.data$times
plot(t, residuals[1,], ylim=range(residuals,na.rm=TRUE), type='n', xlab='Time[h]', ylab='residuals')
for (i in 1:nrow(residuals)) points(t, residuals[i,])
@
    \caption{Residuals vs time.}
  %\end{center}
\end{figure}

@
\begin{figure}
  %\begin{center}
   \setkeys{Gin}{width=1.2\textwidth}
<<residuals-vs-log10CFU, fig=TRUE, pdf=FALSE>>=
plot(model$exp.data$log10CFU, residuals, xlab='log10(CFU/mL)', ylab='residuals')
@
    \caption{Residuals vs log10(CFU/mL).}
  %\end{center}
\end{figure}

%   \setkeys{Gin}{width=0.75\textwidth}

%Densities and correlations:
%\begin{figure}[htbp]
%  \begin{center}
%   \setkeys{Gin}{width=1.2\textwidth}
%<<Densities, fig=TRUE, pdf=FALSE>>=
%pairs(st$x, diag.panel=function(x){par(new=T); plot(density(x), main='')})
%@
%    \caption{Parameters: densities on diagonal}
%  \end{center}
%\end{figure}

%Densities and correlations:
\begin{figure}[htbp]
  \begin{center}
   \setkeys{Gin}{width=1.2\textwidth}
<<Densities, fig=TRUE, pdf=FALSE>>=

pairs((stx[selected.parms]), diag.panel=function(x){par(new=T); plot(density(x), main=''); rug(x)})
@
    \caption{Parameter: Densities on diagonal}
  \end{center}
\end{figure}

%Log-Densities and correlations:
\begin{figure}[htbp]
  \begin{center}
   \setkeys{Gin}{width=1.2\textwidth}
<<logDensities, fig=TRUE, pdf=FALSE>>=

pairs(log10(stx[selected.parms]), diag.panel=function(x){par(new=T); plot(density(x), main=''); rug(x)})
@
    \caption{Parameter: log10-densities on diagonal}
  \end{center}
\end{figure}


\pagebreak

\section {Models} \label{models}

All employed models are ODE of the same form:
$${dN \over dt} = K_g N(t)(1 - {N(t) \over N_{max}}) - r(C(t)) N(t)$$

The differences are due to different forms of $r(C)$ function
%$$ r(C) = K_k { C^H \over { C^H + C_{50}^H}} $$

Implemented models for $r(C)$: SIMPLE and two published by Vincent Tam
\begin{description}
  \item[SIMPLE]
    $$ r(C) = K_k { C^H \over { C^H + C_{50}^H}} $$
  \item[VT2005] http://dx.doi/org/10.1093/jac/dki086
    $$ r(C) = K_k { C^H \over { C^H + (\alpha C_{50})^H}} $$
    $$ \alpha = 1 + \beta ( 1 - exp(-C(t) t \tau) $$
  \item[VT2007] http://dx.doi.org/10.1007/s10439-007-9306-x
    $$ r(C) = R e^{-At} + b $$
    $$ b(C) = K_b { C^{H_b} \over { C^{H_b} + C_{50b}^{H_b} } } $$
    $$ R(C) = K_k { C^H \over { C^H + C_{50}^H} } - b(C) $$
    $$ A(C) = K_A { C^{H_A} \over { C^{H_A} + C_{50A}^{H_A} }} $$
\end{description}

\end{document}

% use multiple figures...

mfcol <- c(2,2)
mfg <- c(1,1); plot(1,1)
mfg <- c(2,2); plot(1,1)

n <- 100; x <- 2*pi*(1:n)/n
split.screen(fig=c(2,2))
screen(1); plot(x, sin(x), type='l')
screen(2); plot(x, cos(x), type='l')
screen(3); plot(x, exp(x), type='l')
screen(4); plot(x, sin(x)*cos(x), type='l')
